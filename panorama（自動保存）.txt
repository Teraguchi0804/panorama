window.onload = function () {

	/*var initialPoint = 0;
	var currentPoint = 0;
	var points = [
		{ x: 100, y:100, img:"aslfjks.jpg" },
		{ x: 200, y:100, img:"assdass.jpg" },
		{ x: 300, y:100, img:"asdajks.jpg" }
	];
	var links = [
		{ from: 0, to: 1},
		{ from: 1, to: 2}
	];*/

	if(!Detector.webgl) Detector.addGetWebGLMessage();

	var renderer, scene, fov, camera, ambient, geometry, material, mesh, baseTime
	isUserInteracting = false,
	onMouseDownMouseX = 0, onMouseDownMouseY = 0,
	lon = 0, onMouseDownLon = 0,
	lat = 0, onMouseDownLat = 0,
	phi = 0, theta = 0;

	// (1)レンダラの初期化
	renderer = new THREE.WebGLRenderer({ antialias: true });
	renderer.setSize(window.innerWidth, window.innerHeight);
	//                        色        α
	renderer.setClearColorHex(0x000000, 1);
	document.body.appendChild(renderer.domElement);

	// (2)シーンの作成
	scene = new THREE.Scene();

	// (3)カメラの作成

	fov = 72;

      
	//                                   画角 アスペクト比
	camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 0.1, 10000);
	   
	camera.position = new THREE.Vector3(0, 1, -1);
	camera.target = new THREE.Vector3( 0, 0, 0 );
	camera.lookAt(camera.target);
	scene.add(camera);


	/*カメラコントロール*/


	ambient = new THREE.AmbientLight(0xFFFFFF);
	scene.add(ambient);

	
	//npoint=[x:i,y:j,現在の向き];

	  


	// (5)表示する物体の作成
	radius = 1;
	segmentsWidth = 32;
	segmentsHeight = 16;
	phiStart = 0;
	phiLength = 2 * Math.PI;
	thetaStart = 1;
	thetaLength = Math.PI - 2 * thetaStart;

	geometry01 = new THREE.SphereGeometry(
		radius,
	      segmentsWidth,
	      segmentsHeight,
	      phiStart,
	      phiLength,
	      thetaStart,
	      thetaLength

		
	);
	
	material01 = new THREE.MeshBasicMaterial({
		overdraw: true,
	      map: THREE.ImageUtils.loadTexture('images/Panorama05.jpg')
	});

	material01.side = THREE.BackSide;
	mesh = new THREE.Mesh(geometry01, material01);
	scene.add(mesh);

	mesh.position.x=0;
	mesh.position.y=0;
	mesh.position.z=0;


	geometry02 = new THREE.SphereGeometry(
		radius,
	      segmentsWidth,
	      segmentsHeight,
	      phiStart,
	      phiLength,
	      thetaStart,
	      thetaLength
		

	);
	
	mesh.position.x=5;
	mesh.position.y=5;
	mesh.position.z=5;

	material02 = new THREE.MeshBasicMaterial({
		overdraw: true,
	      map: THREE.ImageUtils.loadTexture('images/2222.jpg')
	});


	material02.side = THREE.BackSide;
	mesh = new THREE.Mesh(geometry02, material02);
	scene.add(mesh);


	/*カメラ移動
	var t=0;
	function loop() {
		t++;
		geometry01.rotation.set( t/100, 0, 0 );
            geometry02.rotation.set( 0, t/100, 0 );
	      renderer.clear();
		renderer.render(scene, camera);
		window.requestAnimationFrame(loop);
      } 
	function threeStart() {
  		Three();
  		Camera();
  		Scene();   
  		Light();
  		Object();
  		loop();
	}*/

	// (6)レンダリング
	baseTime = +new Date;

	function render() {
		requestAnimationFrame(render);
		//mesh.rotation.y = 0.3 * (+new Date - baseTime) / 1000;
		renderer.render(scene, camera);
	};

	render();

	function onWindowResize() {
		camera.aspect = window.innerWidth / window.innerHeight;
	      camera.updateProjectionMatrix();
	      renderer.setSize( window.innerWidth, window.innerHeight );
	};


	function onDocumentMouseDown( event ) {
		event.preventDefault();
	    	isUserInteracting = true;
	    	onPointerDownPointerX = event.clientX;
	    	onPointerDownPointerY = event.clientY;
	    	onPointerDownLon = lon;
	    	onPointerDownLat = lat;


	    	lat = Math.max( - 85, Math.min( 85, lat ) );
	    	phi = ( 90 - lat ) * Math.PI / 180;
	    	theta = lon * Math.PI / 180;
	    	camera.target.x = 500 * Math.sin( phi ) * Math.cos( theta );
	    	camera.target.y = 500 * Math.cos( phi );
	    	camera.target.z = 500 * Math.sin( phi ) * Math.sin( theta );
	    	camera.lookAt( camera.target );
	};

	function onDocumentMouseMove( event ) {
		if ( isUserInteracting ) {
	      lon = ( onPointerDownPointerX - event.clientX ) * 0.1 + onPointerDownLon;
	      lat = ( event.clientY - onPointerDownPointerY ) * 0.1 + onPointerDownLat;
		}

	    	lat = Math.max( - 85, Math.min( 85, lat ) );
	    	phi = ( 90 - lat ) * Math.PI / 180;
	    	theta = lon * Math.PI / 180;
	    	camera.target.x = 500 * Math.sin( phi ) * Math.cos( theta );
	    	camera.target.y = 500 * Math.cos( phi );
	    	camera.target.z = 500 * Math.sin( phi ) * Math.sin( theta );
	    	camera.lookAt( camera.target );
	};

	function onDocumentMouseUp( event ) {
		isUserInteracting = false;
	};


	/*
	function onDocumentMouseWheel( event ) {
		var fovMin = 0.1, fovMax = 150;
	    	// WebKit
	    	if ( event.wheelDeltaY ) {
	      	fov -= event.wheelDeltaY * 0.05;
	      // Opera / Explorer 9
	    	} else if ( event.wheelDelta ) {
	      	fov -= event.wheelDelta * 0.05;
	    	// Firefox
	    	} else if ( event.detail ) {
	      	fov += event.detail * 1.0;
	    	}
	    	if (fov < fovMin) {
	      	fov = fovMin;
	    	}
	    	if (fov > fovMax) {
	      	fov = fovMax;
	    	}
	    	camera.projectionMatrix.makePerspective( fov, window.innerWidth / window.innerHeight, 0.1, 10000 );
	    	render();
     };
	*/

	
	window.addEventListener( 'mousedown', onDocumentMouseDown, false );
	window.addEventListener( 'mousemove', onDocumentMouseMove, false );
	window.addEventListener( 'mouseup', onDocumentMouseUp, false );
	//window.addEventListener( 'mousewheel', onDocumentMouseWheel, false );
	//window.addEventListener( 'DOMMouseScroll', onDocumentMouseWheel, false);
	window.addEventListener( 'resize', onWindowResize, false );
};